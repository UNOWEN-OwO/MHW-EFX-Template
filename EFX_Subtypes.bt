//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include <EFX_Utils.bt>

typedef struct {
    int     unkn0;
    XYZ     translate(0)<name="Translation T",bgcolor=0xFFAA00,read=ReadfloatXYZ>;
    XYZ     rotate(0)<name="Rotation R",bgcolor=0xAA00FF,read=ReadfloatXYZ>;  // Format Exceptions too many to diaplay
    XYZ     resize(0)<name="Resize S",bgcolor=0x00FFAA,read=ReadfloatXYZ>;    // Format Exceptions too many to diaplay
    int     unkn1;  // {0: 236, 1: 49, 2: 233, 3: 295, 4: 28783, 5: 36}
    //XYZ     unkn2(0)[6]<optimize=true,read=ReadfloatXYZ>;
    XYZ     Translation_Velocity(0)<optimize=true,read=ReadfloatXYZ>;
    XYZ     Translation_Velocity_Modifier(0)<optimize=true,read=ReadfloatXYZ>;//Multiplier/Acceleration? [0,1]
    XYZ     Rotation_Velocity(0)<optimize=true,read=ReadfloatXYZ>;
    XYZ     Rotation_Velocity_Modifier(0)<optimize=true,read=ReadfloatXYZ>;//Multiplier/Acceleration? [0,1]
    XYZ     Scale_Velocity(0)<optimize=true,read=ReadfloatXYZ>;
    XYZ     Scale_Velocity_Modifier(0)<optimize=true,read=ReadfloatXYZ>;//Multiplier/Acceleration? [0,1]

    int     enableVelocityBitflag;  // {0: 26795, 1: 2438, 2: 340, 3: 59} Bitflag: Pos0: Enable Velocity, Pos1: Enable Acceleration?
} ExternTransform3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternTransform3D transform3d;
} Transform3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    XYZ     translation_tracking(1)<name="Translation Tracking Mode",read=ReadintXYZ,bgcolor=0xAA0000,comment="0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform ">; 
    // 0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform 
    XYZ     angle_tracking(1)<name="Angle Tracking Mode",read=ReadintXYZ,bgcolor=0x00AA00,comment="0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Snap to Angle And Track ">;
    // 0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Snap to Angle And Track
    XYZ     scale_tracking(1)<name="Scale Tracking Mode",read=ReadintXYZ,bgcolor=0x00AA00,comment="0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform ">;
    // 0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform
    int     spawnTrack<name="Track Across Spawns",bgcolor=0x0000AA0>;
    int     unkn1; // {0: 20433, 1: 9199}
    int     spawnLock<name="Lock To Position (Frames)",bgcolor=0x0000AA0>;
    int     bleedPos<name="Progressively Lock Elements to Position (Frames)">;
    int     bone_lim<name="Bone Limitation">;
} ParentOptions;

typedef struct{
    int     unkn0;
    int     instancesSpawnedTotal;
    int     instancesSpawnedPerFrame;
    int     randomizedSpawnsPerFrame;
    int     frameDelayBetweenSpawns;
    int     randomizedDelay;
    int     durationOfSpawnerLifespan;
    int     randomizedLifespan;
    int     instanceCountUnknLimit;
    int     instanceCountUnknLimitJitter;
    int     occur<name="Spawn Start Delay">;
    int     occur2<name="Randomized Spawn Start Delay">;
    uint32  unkn10;
    uint32  unkn11;
    uint32  repeatAtribute;//0 Repeat indefinitely, above is the number of repetitions; 
                            //I don't know what exactly it is doing but for Spawn uint32 unkn20 will allow other attributes to repeat once or continuously 
                            //with another one that is finite with int durationOfSpawnerLifespan 
                            //if the unkn20 is 0 if it is 1 or higher it will do that many cycles before it stops
    uint32  unkn21;
    uint32  unkn30;
    uint32  unkn31;
}ExternSpawn;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternSpawn spawn;
} Spawn;


typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    unkn0;
    long    fadeInDuration;
    long    fadeInDurationJitter;
    long    duration;
    long    durationJitter;
    long    unkn2[2];
    long    fadeOutDuration;
    long    fadeOutDurationJitter;
    long    timeToDeath<comment = "Overrides indefinite">;
    long    timeToDeathJitter<comment = "Overrides indefinite">;
    long    indefiniteLifespan;
} Life;

typedef struct{
    int     unkn0;
    XYZ     transform(0);
    int     patternControl<comment="0 - Cube, 1 - Sphere, 2 - Ring, 3 - Spot">;
    int     unkn2;
    float   unkn3_f0;
    // Does not reorient the normal or tangent vector of the spawn object only the trayectory over which it is copied.
    float   trayectoryRotationX;
    float   trayectoryRotationY;
    float   trayectoryRotationZ;

    int     unkn3_i0;
    float   spawnAngleLimits;
    float   unkn3_f1;
    int     spawnPerCycle;//On each cycle it spawns a number of entries, and then offsets the next cycle by one position
    int     spawnTotal;
    float   radiusEnd;
    float   radiusOrigin;
    float   unknRadiusRelated;
    int     unkn4;
}ExternEmitterShape3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternEmitterShape3D emitterShape3d;
} EmitterShape3D;

typedef struct {
    //Neutral is (0,1,0)
    int     unkn0[3];

    float   rotationX;
    float   rotationXJitter;
    float   rotationY;
    float   rotationYJitter;
    float   rotationZ;
    float   rotationZJitter;

    float expansion_radius_limit;
    float expansion_radius_jitter;
    float expansion_radius_elasticity;// 0 - completely dampened (Instantly at Position), 1 - No dampening, continues moving.
    float expansion_radius_elasticity_jitter;

    //Net Force conserved
    float velocityX;//Substracts from system net energy so higher values restrict motion radially
    float velocityY;
    float velocityZ;

    float energyOnAxisX;//(1-x), above 1 is traditional emission on the axis radially, below is implosion 1 is no energy. Higher energy is faster
    float energyOnAxisY;//
    float energyOnAxisZ;//

    int   expansionType; //1 - Radial, 2 - Directional, 5 - No Expansion

    float gravity;
    float gravity_jitter;

    int     expansionDelay;
    int     expansionDelayJitter;
    int     gravityDelay;
    int     gravityDelayJitter;
    long    NULL2;

} ExternVelocity3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternVelocity3D velocity3d;
} Velocity3D;


typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    float   viewAngleLimit;//360 visible from every angle
    float   clipMin;
    float   fadeStart;
    float   clipMax;
} FadeByDepth;

// I was like WTF, any way I labeled the float...
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn00;
    int     unkn01;
    long    spacer0;
    int     unkn03;
    float   unkn04<bgcolor=0x91A480>;
    int     unkn05[2];
    long    spacer1;
    int     unkn07[2];
    
    float   maxLengthLimit;
    float   contractionSpeed;//0 Lingers, 1 retracts, infinity retracts instantly
    float   colourTransitionPoint;// 0 is instantly start transition, 1 is start at the end
    float   emissiveStrength;
    float   unkn08;

    long    spacer2;
    int     unkn10;
    float   uvRepetition<bgcolor=0x91A480>;
    int     unkn12[3];
    long    spacer3;

    EPVColorSlot head;
    EPVColorSlot tailEnd;

    float   unkn23<bgcolor=0x91A480>;
    long    NULL5;
    float   unkn24<bgcolor=0x91A480>;
    long    NULL6;
    float   unkn25<bgcolor=0x91A480>;
    long    NULL7;
    float   unkn26;
    long    NULL8;
    short   NULL9;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} RibbonBlade;

typedef struct{
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     applicationRule;//Enum that determine how long and how many times it applies
    XYZ     color(2)[2]<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness<name="Brightness",bgcolor=0x00aaaa>;
    int     unkn2[3];
    int     EPVColorSlot1;
    int     SlotOverride1;
    int     EPVColorSlot2;
    int     SlotOverride2;
    float   scale<name="Scale",bgcolor=0xaa55aa>;
    float   scaleJitter;
    float   width<name="Width",bgcolor=0xaaaa55>;
    float   widthJitter;
    float   height<name="Height",bgcolor=0xaaaa55>;
    float   heightJitter;

    float   flowmapSpeed;
    float   flowmapSpeedJitter;
    float   flowmapAcceleration;
    float   flowmapAccelerationJitter;
    float   flowmapStrength;
    float   flowmapStrengthJitter;
    float   flowmapStrengthAcceleration;
    float   flowmapStrengthAccelerationJitter;

    int     path_len<name="Path Length",bgcolor=0x123456>;
}dds_data;

typedef struct{    
    int     unkn0;
    int     applicationRule;//Enum that determine how long and how many times it applies
    XYZ     color(2)[2]<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness<name="Brightness",bgcolor=0x00aaaa>;
    int     unkn2[3];
    int     EPVColorSlot1;
    int     SlotOverride1;
    float   unknDimension;
    float   unknDimensionJitter;
    float   scale<name="Scale",bgcolor=0xaa55aa>;
    float   scaleJitter;
    float   width<name="Width",bgcolor=0xaaaa55>;
    float   widthJitter;
    float   height<name="Height",bgcolor=0xaaaa55>;
    float   heightJitter;

    float   flowmapSpeed;
    float   flowmapSpeedJitter;
    float   flowmapAcceleration;
    float   flowmapAccelerationJitter;
    float   flowmapStrength;
    float   flowmapStrengthJitter;
    float   flowmapStrengthAcceleration;
    float   flowmapStrengthAccelerationJitter;

    int     path_len<name="Path Length",bgcolor=0x123456>;
}billboard_data;

typedef struct{
    billboard_data dds;
    int     unkn5;
    uint64  unkn6;
    float   unkn7;
    int     unkn8;
    int     unkn9;
    char    p[dds.path_len]<name="Path",bgcolor=0x123456>;
}ExternBillboard3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternBillboard3D billboard3d;
} Billboard3D;

typedef struct {
    dds_data    dds;
    int     unkn5[4];
    XYZ     rotation(0);
    uint64  unkn7;
    char    p[dds.path_len]<name="Path",bgcolor=0x123456>;
} Plane;

typedef struct{
    int     unkn0;
    XYZ     color(2)[2]<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    //float   unkn1[10];
    float   brightnessSlot1;
    float   emissiveMultiplier;
    float   brightnessSlot2;
    float   brightnessSlotMultiplier1;
    float   brightnessSlotMultiplier2;
    float   opacity;
    float   unknownFloat;
    int     unknownInt[3];
    //
    int     unkn2[26];
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} ExternRgbWater;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternRgbWater rgbWater;
} RgbWater;

typedef struct{
    int     unkn0;
    float   animationSpeed<name="Speed",bgcolor=0x0000BB>;
    long    NULL;
    float   scaleSpeed;
    float   scaleSpeedJitter;
    float   unkn1[2];

    float   scaleAccel;
    float   scaleAccelJitter;

    float   unkn2[8];
    int     delay;
    int     delayJitter;
}ExternScaleAnim;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternScaleAnim scaleAnim;
} ScaleAnim;

typedef struct{
    int     unkn0;
    int     uvs_index<name="UVS File Path Index",bgcolor=0xBB0000>;
    long    NULL;
    int     startingFrame;
    int     startingFrameJitter;
    float   animationSpeed;
    float   animationSpeedJitter;
    float   animationAcceleration;
    float   animationAccelerationJitter;
    int     loopingEnum<comment="0-NotAnimated, 2-RandomRestart,8-, 9-Continuous">;//looping related
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
}ExternUVSequence;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternUVSequence uvsequence;
} UVSequence;


typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    float   unkn1;
    float   transparentness<name="Transparentness & Brigntness",bgcolor=0x00BB00>;
    long    NULL;
    int     unkn2;
} AlphaCorrection;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     unkn1;
    int     spacer;
    int   unkn2;
    float   zDepthModifierStart;
    float   zDepthModifierEnd<bgcolor=0xAA00AA>;//<name="Effect Type Control",bgcolor=0xAA00AA>;
    int     unkn3_0;
    int     unkn3_1;
    int     controlBitflag<comment="0 no alpha, 1 is alpha enabled, 2 is emissive behavior, 3 is inverted color + alpha, 6 is grey scale">;
    float   unkn4[16];
    byte    objectInteractionFlag0<comment="Player Weapons and Interactables">;
    byte    objectInteractionFlag1<comment="Map">;
    byte    objectInteractionFlag2<comment="Weapon SubParts and Skybox">;
    byte    objectInteractionFlag3<comment="Player Skin">;
    int     visibleOnPreview;//bitflag
    int     unkn5[2];
} ShaderSettings;

typedef struct{
    int     unkn0;
    XYZ     color1(2)<name="Color Channel 1 (Alpha)",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness1<name="Brightness 1 (Alpha)">; //colors will combine
    XYZ     color2(2)<name="Color Channel 2 (RGB)",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness2<name="Brightness 2">;
    float   unkn4;
    float   brightness3<name="Color Balance 1">; //seems to bring out color 1 without lowering overall brightness, might be more of a color balance
    float   brightness4<name="Color Balance 2">; //setting either to 0 will make all disappear
    int     unkn6[10]<name="Color 1 Params">; //the 10th param kills color when set to 1
    int     unkn7[10]<name="Color 2 Params">; //I have no idea what else it does
}ExternRgbFire;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternRgbFire rgbFire;
} RgbFire;

typedef struct {
    int     unkn0[2];
    long    CD1<hidden = true>;

    float     emissive_saturation;
    float     emissive_saturation_jitter;
    float     emissive_brightness;
    float     emissive_brightness_jitter;
    XYZ       rotation(0);
    float     unkn5_2;
    float     unkn5_3;
    XYZ       scale(0);
    float     global_scale;
    float   global_scale_jitter;
    int     starting_model_viscon;
    int     end_model_viscon;//picks between the 2 at random
    colour     color1;
    colour     color2;
    colour     color3;
    colour     color4;
    int     unkn7[3];
    int     tracking_flags;//0 - Guide Source, 
                         //1 - Away from Source,
                         //2 - Look Away From Camera
                         //3 - WTF Occupies entire map
                         //4 - Guide Camera
                         //5 - Dissapears
                         //6 - Don't Track Rotation At All
                         //7 - Dissapears
                         //8 - Perpendicular to Ground, Don't Track
    int     unkn40;
    int     affectedByLight;
    int     shadowCastBitflag;
    int     epv_color_slot1;
    int     unkn5;
    int     epv_color_slot2;
    int     unkn6_1;
    byte    colorize_material1[4];//byte controls
    byte    colorize_material2[4];//byte controls //Second byte control is tied to following the EPV Slot colour with NFH plugin
    int     randommizeViscon<comment = "0 Spawn Random Sample of Range, 1 Spawn all of the Range">;
    
    short   NULL1;
}Mod3Properties;

typedef struct {
    Mod3Properties properties;
    byte    BeginMod3;
    string  path<name="Mod3 Path",bgcolor=0x123456,read=ReadStr>;
    string  placement<name="Pl (Placement) Path",bgcolor=0x123456,read=ReadStr>;
} ExternMesh;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternMesh mesh;
} Mesh;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    NULL[2];
    XYZ     spin_velocity(0);
    float unkn1_0;
    float unkn1_1;
    float momentum_conservation;
    XYZ     spin_acceleration(0);    
    float unkn1_2;
    //int unkn1_3;
} RotateAnim;

typedef struct {
    long    unkn; // 56 3A 6D EE
    // long    const0<name="E2D9F0AB",format=hex>;
    long    const0<name="AFDB4043",format=hex>;

    // 0x00 - ?; 0x03 - NULL; 0x06 - int; 0x09 - ?; 0x0C - float; 0x0F - Color;
    // 0x80 - file; 0x36/0x37 - int*2; 0x14 - XYZ
    int     t<name="Parameter Type">;

    if(t==0x03)
        long    NULL;
    else if (t==0x05)
        short   unkn0;
    else if (t==0x06)
        int     decal_epv_color_slot;
    else if (t==0x0C)
        float   unkn0;
    else if (t==0x0F)
        XYZ     color(2)<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00>;
    else if (t==0x14)
        XYZ     unkn1(3)<read=ReadfloatXYZ,bgcolor=0x00FFFF>;
    else if (t==0x15) {
        float   unkn0;//float unkn0;
        long    unkn1;//float unkn1;
        float   unkn2;//float uScale;
        long    unkn3;//float vScale;
    } else if (t==0x36 || t==0x37)
        int     unkn1[2];
    else if (t==0x40)
        int64   unkn0;
    else if (t==0x80){
        long    file_type;
        int     path_len<name="Path Length",bgcolor=0x123456>;
        char    p[path_len]<name="Path",bgcolor=0x123456>;
    } else {
        //Printf("UNKNOWN EFX Behaiv Type\n");
        //Printf("%d\n",FTell());
        long    unkn_type;
    }
} EFX_Behav;

typedef struct {
    int     unkn0;
    int     behav_type_len<name="Behavior Type Len",bgcolor=0xABCDEF>;
    int     para_count<name="Parameter Count",bgcolor=0xFEDCBA>;
    char    b_type[behav_type_len]<name="Behavior Type",bgcolor=0xABCDEF>;
    EFX_Behav efx_behav[para_count]<name="Behavior Parameter",optimize=false>;
} EFX_Behavior;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    EFX_Behavior    efx_behav<name="Behavior Parameter">;
} PtBehavior;

typedef struct{
    int     unkn0[2];
    float   unkn1;
    ubyte   body_p<name="Player Aura Part",bgcolor=0x550055,comment="/wiki/EFX-Effect-Editing#aura-parts">;
    ubyte   wp_p<name="Weapon Aura Part",bgcolor=0x550055,comment="/wiki/EFX-Effect-Editing#aura-parts">;
    short   NULL;
    int     epv_color_slot;
    XYZ     color(2)<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00>;
    float   unkn4;
    float   area[2]<name="Area of Aura",bgcolor=0x555500>;
    float   bright<name="Brightness (Can be Negative)",bgcolor=0x005555>;
    int area_of_aura; //9 front half, 8-1 everything
    float radii_effect_unkn0;
    float radii_effect_unkn1;
    float radii_effect_unkn2;
    float   unkn5[5];
}ExternPlEmissive;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    ExternPlEmissive plEmissive;
} PlEmissive;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;

    float initialPosition;
    float initialPositionJitter;
    float speed;
    float speedJitter;
    float accel;//Maybe
    float accelJitter;//Maybe
    float innerRadius;
    float innerRadiusJitter;
    float outerRadius;
    float outerRadiusJitter;

    float restitutionDelay;
    float restitutionDelayJitter;
    float restitutionEccentricity;
    float restitutionEccentricityJitter;
    float restitutionElasticity;
    float restitutionElasticityJitter;
    float unkn16;
    float unkn17;
    float unkn18;
    float unkn19;

    float unkn20;
    float unkn21;
    float unkn22;

    int     int_unkn1[2];
    float   float_unkn2[3];    

} Guide;

typedef struct {
    long    set<bgcolor=0x990000>;
    int     unkn0<bgcolor=0xcc0000>;
    long    t<bgcolor=0xcc0000>;
    int     type<bgcolor=0xff0000>;
    if(type==0x80){
        long    head<name="EB5D1F24">;
        long    NULL;
        int     path_len<name="Path Length",bgcolor=0x123456>;
        char    p[path_len]<name="Path",bgcolor=0x123456>;
    }else if (type==0x06){
        int64   NULL;
        int     unkn;
    }else if (type==0x03 || type==0x0A || type==0x0C)
        long    NULL[3];
    else if (type==0x15)
        float   unkn[6];
} Tex_Set;

typedef struct {
    long    material_name_hash;
    long    material_shader_id_hash;
    long    unkn03;
    int     set_count<name="Set Count",bgcolor=0x660000>;
    Tex_Set     set[set_count]<optimize = false>;
} Tex_Block;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int64   unkn00;
    int     block_count;
    Tex_Block   block[block_count]<optimize=false>;
} Material;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
    float   unkn1[3];
    XYZ     unkn_set_1(0);
    int64   NULL[3];
    float   unkn2[12];
    XYZ     unkn_set_2(0);
    float   unkn3[5];
} Turbulence;



// #UNKNOWN STRUCT
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn;
    float   unkn2[4];
} FadeByEmitterAngle;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     section_length;
    long    spacer0<hidden=true>;
    XYZ     color(2)<name="Color 1",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    long    spacer1<hidden=true>;
    XYZ     color2(2)<name="Color 2",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    long    spacer2<hidden=true>;;
    float   brightness<name="Brightness",bgcolor=0x00FF00>;
    long    unkn4[2];
    float   scale;
    float   scale_jitter;
    float   width;
    float   width_jitter;
    float   length;
    float   length_jitter;
    long    uv_map_height;
    float   material_tesselation_density;//Material Repeating Density
    float   material_tesselation_jitter;
    float   uv_map_width;
    long horizontal_physics_subdivision_count<comment="Disney Magic at 5000">;//Number of Subdivisions+1 (Number of horizontal dividers, minimum 2)
    long vertical_physics_subdivision_count;//Maybe, untested for vertical repetitions
    float   unkn15;

    long restitution_direction<comment = "0-Left,1-Up,2-Forward,3-Right,4-Down,5-Backwards,6-None">;//0-Left,1-Up,2-Forward,3-Right,4-Down,5-Backwards
    long    unkn16[4];
    long    startingAngle;
    long    startingAngleJitter;
    long    unkn16_0[2];
    short   unkn16_1;
    short   unkn16_2<comment = "0 - Align to World , Anything Else - Align to Source">;
    long    spacer3<hidden=true>;
    //
    float   unkn17;
    long    spacer4<hidden=true>;
    float lengthwise_offset_relative_to_camera;
    float unknown19_0;
    float restitution;
    float restitution_jitter;
    float inertial_excess;
    float inertial_excess_jitter;
    float springiness;
    float springiness_jitter;
    long spacer5<hidden=true>;
    long    unkn20[4];
    float   unkn21;
    long    unkn22[3];
    long    tailTiedToBone;
    float   unkn23[8];
    long    unkn24;
    long    epvcolor[2];
    long    spacer7<hidden=true>;
    float base_width_multiplier;
    float base_opacity;
    float tip_width_multiplier;
    float tip_opacity;
    long    spacer8<hidden=true>;
    float   unkn27[2];
    short   visiblePreview;
    short    spacer9<hidden=true>;
    float base_flap_frequency;
    float base_flap_frequency_jitter;
    float base_flap_amount;
    float base_flap_amount_jitter;
    float tip_flap_frequency;
    float tip_flap_frequency_jitter;
    float tip_flap_amount;
    float tip_flap_amount_jitter;
    byte ib_junk[32]<hidden=true>;
    string  path1<name="UNKN 03 Path",bgcolor=0x123456,read=ReadStr>;
} Ribbon;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    NULL;
    int     section_length;
    long    spacer<hidden=true>;
    //XYZ     angular_movement(3)<read=ReadfloatXYZ,bgcolor=0x00FFFF>;
    float   main_axis_speed;
    float   secondary_axis_speed;
    float   teleport_radius;
    float   smooth_radius_randomized;
    float   main_axis_speed2;
    float   secondary_axis_speed2;
    float   teleport_radius2;
    float   smooth_radius_randomized2;
} Noise;

typedef struct{
    float u;
    float uJitter;
    float v;
    float vJitter;
}uv_transform;

typedef struct{
    int     unkn0;
    uv_transform initialPosition;
    uv_transform speed;
    uv_transform acceleration;//Multiplies speed every second
    uv_transform scale;
    uv_transform scaleSpeed;
    uv_transform scaleAcceleration;
}Material_Animation_Data;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    Material_Animation_Data uv1;
    Material_Animation_Data uv2;
    int     unkn2;
    float   extraMaterialInitialPosition;
    float   extraMaterialInitialPositionJitter;
    float   extraMaterialSpeed;
    float   extraMaterialSpeedJitter;
    float   opacity;
    float   opacityJitter;
    float   opacityAcceleration;//Multiplies opacity every second
    float   opacityAccelerationJitter;    
    
} UVControl;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1[4];
    int64   NULL;
    int     unkn2[2];
} FadeByAngle;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1[8];
} EmitterBoundary;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    short   unkn0;
    short   unkn1;
    short   timing<comment= "0 Attaches at spawn, 4 attaches after the end">;//0
    short   unkn3;
    short   relationIndex;//Play Emitter/Play EFX Index that will declare the children
    short   unkn5;
    short   unkn6;
    short   unkn7;
    short   unkn8;
    short   unkn9;
} PtLife;//Declares this as parent to other main bodies


// #EFX TYPE STRUCT

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     referenceIndex;
    int     unkn1[7];
} ExternReference;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    byte    unkn1[4];
    float   unkn2;
    int     unkn3;
    long    unkn4;
    float   unkn5[9];
} FakePlane;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    byte    unkn1;
} Dummy;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[10];
} RandomFix;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unknown;
    float   offsetXY[2];//this used to be int64 offset before crimson suggested this split, so if it's wrong it's his fault
    float   rotation;
    float   scaleXY[2];
} Transform2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    unkn0[2];
    XYZ     color(2)[2];
    float   emissionMin;
    float   emissionMax;
    int     unkn3[4];

    float   rotationJitterMin;
    float   rotationJitterMax;
    float   scaleJitterMin;
    float   scaleJitterMax;
    float   imageResolutionX;
    float   scaleX;
    float   imageResolutionY;
    float   scaleY;
    float   unkn4[8];

    int     path_len<name="Path Length",bgcolor=0x123456>;
    int     unkn5[2];
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} Billboard2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1[11];
} Blink;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    unkn0;
    float   unkn1[3];
} LuminanceBleed;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    float   offsetX;
    float   offsetXJitter;
    float   offsetY;
    float   offsetYJitter;
    int     unkn20;
    int     spawnCount;
    int     unkn22;//SpawnCountJitter??
    int     unkn22;
} EmitterShape2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];

    float   unkn10;
    float   expansionRadius;
    float   expansionRadiusJitter;
    float   expansionRadiusElasticity;
    float   expansionRadiusElasticityJitter;
    float   unkn15;
    float   unkn16;
    float   energyOnAxisX;

    float   energyOnAxisY;
    int     expansionType; //0-1 Linear, 2-3 No Movement
        
    float   gravity;
    float   gravityJitter;
    
    int   expansionDelay;
    int   expansionDelayJitter;

    int   gravityDelay;
    int   gravityDelayJitter;
} Velocity2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn00[2];
    long    spacer0;
    XYZ     color1(2);
    long    unkn02;
    XYZ     color2(2);
    long    unkn03;
    XYZ     emissive(2);
    long    unkn04;
    //float   unkn05[49];
//Break this one
    int     spacer05_00;
    int     unkn05_01;
    float   sineWaveFreq;
    float   sineWaveFreqJitter;
    float   alphaThreshold;
    float   unkn05_05;
    float   unkn05_06;
    float   unkn05_07;
    float   outwardsExpansionSpeed;
    float   outwardsExpansionSpeedJitter;

    float   unkn05_10;
    int     unkn05_11;
    int     unkn05_12;
    int     unkn05_13;
    int     spacer05_14;
    int     targetBoneID;
    int     unkn05_16;
    float   unkn05_17;
    int     EPVColorSlot1;
    int     EPVColorSlot2;

    int     unkn05_20;
    int     unkn05_21;
    int     unkn05_22;
    float   unkn05_23;
    float   unkn05_24;

    int     inflectionPointCount;
    float   uInflectionAngleLimit;
    float   uInflectionAngleLimitJitter;
    float   vInflectionAngleLimit;
    float   vInflectionAngleLimitJitter;

    int     inflectionPointCount2;
    float   uInflectionAngleLimit2;
    float   uInflectionAngleLimitJitter2;
    float   vInflectionAngleLimit2;
    float   vInflectionAngleLimitJitter2;

    float   glow;
    float   glowJitter;
    float   length;
    float   lengthJitter;

    float   width;
    float   widthJitter;

    float   startWidth;//startWidth
    float   uvRepetitionStart;//Fucking Cursed
    float   endWidth;
    float   uvRepetitionEnd;
    int     unkn05_45;
    int     unkn05_46;
    int     unkn05_47;
    int     unkn05_48;

    int     unkn06[2];

    float   radiusLimit;
    float   radiusLimitJitter;
    float   unkn07_02;
    float   unkn07_03;
    int   unkn07_04;
    float   unkn07_05;
    float   unkn07_06;
    float   unkn07_07;
    float   unkn07_08;
    float   unkn07_09;

    float   unkn07_10;
    float   branchLength;
    float   branchLengthJitter;
    float   unkn07_13;
    float   unkn07_14;
    float   unkn07_15;
    float   unkn07_16;
    float   unkn07_17;
    float   unkn07_18;
    float   unkn07_19;

    float   unkn07_20;
    float   unkn07_21;
    float   unkn07_22;
    float   unkn07_23;
    float   unkn07_24;
    float   unkn07_25;
    float   unkn07_26;
    float   unkn07_27;

    int     unkn08[2];
    float   unkn09[20];
    int     unkn10[4];
    float   unkn11[2];
    int     unkn12[2];
    float   unkn13[6];
    int     unkn14[3];
    float   unkn15[9];
    short   unkn16;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456,optimize = false>;
} Lightning;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     pixelNormalOffset;
    int     unkn2;
} Refraction;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
} MasterOnly;

typedef struct {
    long type<name="Type",format=hex,bgcolor=0x000000>;
    int unknown0;
    int fixed70;
    long spacer0;
    float distanceMod0;
    float distanceMod0Jitter;
    float prop1;
    float prop1Jitter;
    long spacer1;
    long spacer2;
    long spacer3;
    float prop2;
    XYZ  prop3(3);
    int direction;
    //0 left
    //1 down
    //2 forward
    //3 right
    //4 up
    //5 backward
    float distanceMod1;
    float distanceMod1Jitter;
    long spacer;
    int  unknown1;//(usually -1. saw one as 0)
    short unknown2;//(it was 256 so not sure if it is a flag or something else)
} RayCast;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    unkn0;
    long    unkn1;
    float   unkn2;
    long    unkn3;
    XYZ     color(2)<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness<name="Brightness",bgcolor=0xFF0000>;
    float   rimParam[3]<name="Emissive Rim Parameters",bgcolor=0x00FF00>;
    long    unkn4;
    float   blendParam[3]<name="Emissive Rim Blend Parameters",bgcolor=0x0000FF>;
    float   unkn8[5];
} ParentEmissive;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[3];
    float   unkn1[11];
    int     unkn2[2];
    long    unkn3[4];
    float   unkn4[4];
    int     unkn5[2];
    long    unkn6[4];
    float   unkn7;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} TubeLight;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    spacer;
    float   unkn1;
    float   bounce;
    float   bounceJitter;
    int     lifespan;//0 for no interaction, higher values result in more bounce
    int     lifespanJitter;
    float   bounceConditional;
} ScreenSpaceCollision;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    //int     unkn0[8];

    int     unkn00;
    int     physicsEnum;//0 Fall Through, 1 Bounce and Fade, 2 Bounce and Fall Through, 3 For Remaining after Bouncing (Set multiplier to 0), 
    int     unkn02;
    int     unkn03;
    int     unkn04;
    int     unkn05;//
    float   unkn06;
    int     unkn07;  

    //unkn01 physicsEnum //
    float   unkn1[3];
    int     unkn2[2];
    //float   unkn3[9];
    float   bounceElasticity;//Bounce Elasticity On Collision
    float   bounceElasticityJitter;//Bounce Elasticity Jitters
    float   bounceElasticityMultiplier;
    float   horizontalBounce;//Multiplier of bounce elasticity
    float   unkn34;
    float   unkn35;
    float   unkn36;
    float   unkn37;
    int     unkn38;

    int     unkn4[2];
    int     ieIndex;//0 Call PlayEFX Index?, FF FF FF FF Null
    int     unkn6[3];
} PtCollision;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    //long    unkn0[17];

    long    unkn00;
    long    unkn01;
    long    spacer;

    float   width;
    float   widthJitter;

    float   height;
    float   heightJitter;

    float   length;
    float   lengthJitter;

    long    unkn09;

    long    unkn10;
    float   unkn11;
    long    unkn12;
    long    unkn13;
    long    unkn14;

    long    pattern;
    long    unkn16;

    short   unkn17;
} Shovel;


typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     length;
    long    unkn1[length/4-5];
    float   unkn2[3];
    int     unkn3[2];
} FakeDoF;
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     length;
    long    unkn1[length/4-5];
    float   unkn2[3];
    int     unkn3[2];
} RepeatArea;
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[3];
} LinkPartsVisible;
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    spacer<hidden=true>;
    //int     unkn2[2];
    int body_part_id;//1F Everything, 1,2,3,4,5 as usual
    int weapon_id;//Same as PlEmissive
    colour color;
    int epvcolorslot;
    int   alpha_effect;//unknown
    //float   unkn4[4];
    float normal_map_strength;
    float alpha_threshold;//higher values cover less
    float unkn4_0;
    float unkn4_1;
    long    unkn5;
    //float   unkn6[8];
    float roughness_multiplier;
    float metallicness_multiplier;
    float subsurface_multipler;//Transparency
    //float unkn6[5];
    float unkn6_0;
    float craquelure_effect_diffumination;
    float craquelure_threshold;
    float unkn6_1; 
    float craquelure_smoothing_threshold;
    
} PlSnow;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2;
} PtTrigger;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2;
    int     unkn3;
    float   unkn4[6];
    int     unkn5[8];
    byte    unkn6;
} PathChain;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int unknown;//
    int unknown0;
    long spacer;
    float f0;
    float speed;
    float speedMultiplier;
    float f3;
    float f4;
    float radius;
    long i0;
    long i1;//
    int enableRadialVanish;// 1 Freak Speed, 3 disappear on inner radius
    int unknown1;
} Homing;

// Mod3 Useage
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1[3];
    byte    unkn20;
    byte    ddsUsageType;
    byte    unkn22;
    byte    visconIndex;
    byte    unkn21[4];
    int     unkn3;
    string  path1<name="Mod3 Path1",bgcolor=0x123456,read=ReadStr>;
} EmitterShapeMesh;

// NM Useage
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn00[2];
    long    spacer00;
    XYZ     color1(2);
    long    spacer01;
    XYZ     color2(2);
    long    spacer02;

    float   emissionStrength;
    float   unkn03_01;
    long    spacer03;

    float   unkn03_03;
    float   unkn03_04;
    float   unkn03_05;
    float   unkn03_06;
    XYZ     endPosition(3);

    float   unkn03_10;
    float   width;
    float   widthJitter;
    float   length;
    float   lengthJitter;
    float   startWidth;
    float   startOpacity;
    float   endWidth;
    float   endOpacity;

    int     subdivisionCount;
    int     unkn04_01;
    int     uvRepetition;//Set to 1 or 2

    float   widthwiseUVScalingAlpha;//Higher values shrink it
    int     spacer04;
    float   widthwiseUVScalingBML;//Higher values shrink it

    XYZ     color3(2);

    float   unkn06_00;//Probably Flow Map Related
    float   unkn06_01;//Probably Flow Map Related
    float   unkn06_02;//Probably Flow Map Related
    float   unkn06_03;//Probably Flow Map Related
    float   unkn06_04;//Probably Flow Map Related
    float   unkn06_05;//Probably Flow Map Related
    float   unkn06_06;//Probably Flow Map Related
    float   unkn06_07;//Probably Flow Map Related

    short   unkn06_08_00;
    short   unkn06_08_01;//Break Enum 0 Unbreakable, 1 Breakable

    float   lengthBreakpoint;
    float   lengthBreakpointJitter;

    float   breakpointLocation;
    float   breakpointLocationJitter;

    float   breakDelay;//Maybe
    float   breakDelayJitter;//Maybe

    float   tension;
    float   tensionJitter;

    float   unkn06_17;
    float   unkn06_18;

    float   gravityMultiplier;
    float   gravityMultiplierJitter;

    float   inertia;
    float   inertiaJitter;

    float   poseSnapping;
    float   poseSnappingJitter;

    int     endBoneID;//1 1-1, 3 Higher
    int     positionalAberration_01;
    int     positionalAberration_02;
    int     positionalAberration_03;
    int     positionalAberration_04;
    int     positionalAberration_05;

    XYZ     displacement(0);//Z doesn't seem to be working

    int     displacementToggle;//0 everything works, 1, 2 - kills the previous displacement, 3 - kills displacement
    float   unkn09_01;
    float   unkn09_02;
    float   unkn09_03;
    float   unkn09_04;
    float   unkn09_05;

    int     unkn10_00;
    float   unkn10_01;//Angle Related
    float   unkn10_02;//Angle Related Jitter

    int     unkn11;
    int     unkn12_00;
    float   unkn12_01;
    float   unkn12_02;
    float   unkn12_03;

    int     unkn13;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} StrainRibbon;

// 2 cases
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2[1];
    int     unkn3;
    short   unkn4;
} SpawnByAngle;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2[7];
} CheckPureAttribute;

// 1 case CC_Effect cm_flash_000
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2[3];
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} TonemapFilter;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[4];
    float   unkn1[168];
} ColorCorrectFilter;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2;
    int     unkn3;
} SpawnByOcclusion;

// 1 case
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2[3];
} FadeByOcclusion;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2;
    XYZ     color(2);
    long    unkn3[2];
    float   unkn4[13];
} ParentSnow;

// 2 cases
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2[2];
    XYZ     color(2);
    int     unkn3;
    long    unkn4;
    float   unkn5[4];
    long    unkn6;
    float   unkn7[8];
} OtomoSnow;

// 1 case
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1;
} ParentMaterial;

typedef struct{}EffectAttrColorTbl;
typedef struct{}MhEffectDecalBehavior;
typedef struct{}MhEffectDecalBehavior_getTotalFireLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalSmokeLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalSpecularLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalSheetLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalGtoBLifeFrame;
typedef struct{}cCoordParameter;
typedef struct{}IEffectItem;
typedef struct{}Item;
typedef struct{}DynamicRay;
typedef struct{}FlowmapSettings;
typedef struct{}EffectExecutor;
typedef struct{}EffectEvent;
typedef struct{}EventBehaviorProperty;
typedef struct{}DecalBehavior;
typedef struct{}Variant;
typedef struct{}LightBehavior;
typedef struct{}PointLightBehavior;
typedef struct{}SpotLightBehavior;
typedef struct{}uEffectRadialBlurFilter;
typedef struct{}FilterBehavior;
typedef struct{}RadialBlurFilterBehavior;
typedef struct{}EffectData;
typedef struct{}EmitterExecutor;
typedef struct{}TypeMie3D;
typedef struct{}GroupItem;
typedef struct{}GpuPhysics;
typedef struct{}EmitterShape3DOverrider;
typedef struct{}MemoItem;
typedef struct{}IItemPropertyInfo;
typedef struct{}EffectDatabase_ItemPropertyInfo;
typedef struct{}EffectDatabase;
typedef struct{}TimelineResource;
typedef struct{}TimelineListResource;
typedef struct{}INode;
typedef struct{}Node;
typedef struct{}Group;
typedef struct{}Emitter;
typedef struct{}Action;
typedef struct{}Field;
typedef struct{}Node_getType;
typedef struct{}VelocityBase;
typedef struct{}TypeBillboardBase;
typedef struct{}EffectGroupData;
typedef struct{}EffectGroup;
typedef struct{}BoundaryBase;
typedef struct{}RenderTarget_Target;
typedef struct{}MaterialPath;
typedef struct{}TypeLightning_Branch;
typedef struct{}TypeRibbonBladeSection;
typedef struct{}TubeLightSection;
typedef struct{}EffectSettingPreset;
typedef struct{}EffectTimeRedeemPreset;
typedef struct{}Material_MaterialParam;
typedef struct{}Material_MaterialNodeData;
typedef struct{}ShapeMeshHolder;
typedef struct{}cEffectProviderCustomData_ActionElement;
typedef struct{}cEffectProviderCustomData_UnitElement;
typedef struct{}cEffectProviderCustomData;
typedef struct{}PlEmissiveManager;
typedef struct{}Guide_MoveType_AlwaysThrough;
typedef struct{}Guide_MoveType_SkipNear;
typedef struct{}Guide_MoveType_OldType;